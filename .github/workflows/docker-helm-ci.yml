name: Docker and Helm CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: random-log-generator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm random-log-generator:test --version
          
          # Create a complete test config file
          cat > test-config.yaml << EOF
          # Configuration parameters for the log generator
          CONFIG:
            duration_normal: 10
            duration_peak: 2
            rate_normal_min: 0.0001
            rate_normal_max: 0.1
            rate_peak: 0.500
            log_line_size: 100
            base_exit_probability: 0.05
            rate_change_probability: 0.1
            rate_change_max_percentage: 0.1
            write_to_file: false
            log_file_path: '/app/logs/test.log'
            log_rotation_enabled: true
            log_rotation_size: 50
            http_format_logs: true
            stop_after_seconds: 3
            custom_app_names: []
            custom_log_format: "\${timestamp}, \${log_level}, \${message}"
            logging_level: 'INFO'

          # Log levels to use in the logs
          log_levels:
            - DEBUG
            - INFO
            - WARNING
            - ERROR
          EOF
          
          # Run the container with the test config for a short time
          timeout 10s docker run --rm -v $(pwd)/test-config.yaml:/app/config.yaml random-log-generator:test --config config.yaml || code=$?
          if [ $code -eq 124 ]; then
            echo "Container ran successfully and was terminated after timeout"
            exit 0
          else
            echo "Container exited with unexpected code: $code"
            exit 1
          fi

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Lint Helm chart
        run: |
          helm lint ./helm/random-log-generator

  helm-test:
    runs-on: ubuntu-latest
    needs: [docker-build, helm-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: random-log-generator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Create kind cluster
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind-test

      - name: Load Docker image into kind
        run: |
          kind load docker-image random-log-generator:test --name kind-test

      - name: Install Helm chart
        run: |
          # Update the values file to use the local image
          sed -i 's/repository: random-log-generator/repository: random-log-generator\n  tag: test/' ./helm/random-log-generator/values.yaml
          
          # Install the chart
          helm install test-release ./helm/random-log-generator
          
          # Wait for the pod to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=random-log-generator --timeout=60s
          
          # Get pod name
          POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=random-log-generator -o jsonpath="{.items[0].metadata.name}")
          
          # Check pod logs to verify it's running
          kubectl logs $POD_NAME
          
          # Verify the ConfigMap exists
          kubectl get configmap test-release-random-log-generator-config
          
          # Clean up
          helm delete test-release